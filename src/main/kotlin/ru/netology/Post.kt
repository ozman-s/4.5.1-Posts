package ru.netology

data class Post(
    val id: Int, // идентификатор записи.
    val ownerId: Int, // идентификатор владельца стены, на которой размещена запись.
    val fromId: Int, // идентификатор автора записи (от чьего имени опубликована запись).
    val createdBy: Int, // идентификатор администратора, который опубликовал запись (возвращается только для сообществ при запросе с ключом доступа администратора). Возвращается в записях, опубликованных менее 24 часов назад.
    val date: Int, // время публикации записи в формате unixtime.
    val text: String, // текст записи.
    val replyOwnerId: Int, // идентификатор владельца записи, в ответ на которую была оставлена текущая.
    val replyPostId: Int, // идентификатор записи, в ответ на которую была оставлена текущая.
    val friendsOnly: Boolean, // если запись была создана с опцией «Только для друзей».
    val comments: Comments = Comments(), // object информация о комментариях к записи, объект с полями...
    val copyright: Copyright = Copyright(), // object источник материала, объект с полями...
    val likes: Likes = Likes(), // object информация о лайках к записи, объект с полями...
    val views: Views = Views(), // object информация о просмотрах записи. Объект с единственным полем..
    val postType: String, // тип записи, может принимать следующие значения: post, copy, reply, postpone, suggest.

    // ИГНОРИРУЕМ // post_source: object // информация о способе размещения записи. Описание объекта находится на отдельной странице.

    // ИГНОРИРУЕМ // attachments: array // медиавложения записи (фотографии, ссылки и т.п.). Описание массива attachments находится на отдельной странице.

    /* ИГНОРИРУЕМ // geo: object // информация о местоположении , содержит поля:
             type (string) — тип места;
             coordinates (string) — координаты места;
             place (object) — описание места (если оно добавлено).*/

    val signerId: Int, // идентификатор автора, если запись была опубликована от имени сообщества и подписана пользователем;

    // ИГНОРИРУЕМ // copy_history: array // массив, содержащий историю репостов для записи. Возвращается только в том случае, если запись является репостом. Каждый из объектов массива, в свою очередь, является объектом-записью стандартного формата.

    val canPin: Boolean, // информация о том, может ли текущий пользователь закрепить запись
    val canDelete: Boolean, // информация о том, может ли текущий пользователь удалить запись
    val canEdit: Boolean, // информация о том, может ли текущий пользователь редактировать запись
    val isPinned: Boolean, // информация о том, что запись закреплена.
    val markedAsAds: Boolean, // информация о том, содержит ли запись отметку "реклама"
    val isFavorite: Boolean, // true, если объект добавлен в закладки у текущего пользователя.
    val donut: Donut = Donut(), // object информация о записи VK Donut...
    val postponedId: Int // идентификатор отложенной записи. Это поле возвращается тогда, когда запись стояла на таймере.
)